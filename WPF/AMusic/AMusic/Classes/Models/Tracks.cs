//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AMusic.Classes.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    
    public partial class Tracks
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Tracks()
        {
            this.ArtistsInTracks = new HashSet<ArtistsInTracks>();
            this.FeaturedTracks = new HashSet<FeaturedTracks>();
        }
    
        public int ID_track { get; set; }
        public string title { get; set; }
        public int duration { get; set; }
        public string url { get; set; }
        public string lyrics { get; set; }
        public int ID_album { get; set; }
        public Nullable<int> id_in_album { get; set; }
        public int ID_genre { get; set; }
        public Nullable<int> count_of_listenings { get; set; }
    
        public virtual Albums Albums { get; set; }
        public virtual Genres Genres { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ArtistsInTracks> ArtistsInTracks { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<FeaturedTracks> FeaturedTracks { get; set; }

        public string artists {
            get {
                return string.Join(", ", 
                    //AMusicEntities.GetContext().
                    ArtistsInTracks.ToList().Select(ait => ait.Artists).Select(a => a.name));
            }
        }

        public int IdInList { get; set; }

        public string lq_cover {
            get {
                return System.IO.Directory.GetCurrentDirectory()
                    .Substring(0, System.IO.Directory.GetCurrentDirectory().Length - 9) + Albums.url_LQ_cover;
            }
        }

        public string hq_cover {
            get {
                return System.IO.Directory.GetCurrentDirectory()
                    .Substring(0, System.IO.Directory.GetCurrentDirectory().Length - 9) + Albums.url_HQ_cover;
            }
        }

        public string albumTitle {
            get {
                return Albums.title;
            }
        }

        public DateTime whenAddedByCurrentUser {
            get {
                return FeaturedTracks.ToList().Find(ft => ft.ID_user == Properties.Settings.Default.CurrentUserID).when_added.Value;
            }
        }

        public string when_addedStr {
            get {
                return whenAddedByCurrentUser.ToString("D");
            }
        }

        public string durationStr {
            get {
                string time = $"{duration / 60}:";
                int sec = duration % 60;
                if (sec < 10)
                    time += "0";
                time += sec;
                return time;
            }
        }
        
        public string countOfListening {
            get {
                return count_of_listenings.ToString();
            }
        }

    }
}
