//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AMusic.Classes.Models
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Albums
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Albums()
        {
            this.FeaturedAlbums = new HashSet<FeaturedAlbums>();
            this.Tracks = new HashSet<Tracks>();
        }
    
        public int ID_album { get; set; }
        public string title { get; set; }
        public string description { get; set; }
        public Nullable<System.DateTime> date_of_creation { get; set; }
        public string url_LQ_cover { get; set; }
        public string url_HQ_cover { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<FeaturedAlbums> FeaturedAlbums { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Tracks> Tracks { get; set; }


        public string artists {
            get {
                List<Artists> artists = new List<Artists>();
                foreach (var track in Tracks) {
                    foreach (Artists artist
                        in track.ArtistsInTracks.ToList().Where(ait => ait.ID_role == 1).Select(ait => ait.Artists)) {
                        if (!artists.Contains(artist)) {
                            artists.Add(artist);
                        }
                    }
                }
                return string.Join(", ", artists.Select(a => a.name));
            }
        }

        public string hq_cover {
            get {
                return System.IO.Directory.GetCurrentDirectory()
                    .Substring(0, System.IO.Directory.GetCurrentDirectory().Length - 9) + url_HQ_cover;
            }
        }

        public string AlbumColor {
            //get {
            //    return System.IO.Directory.GetCurrentDirectory()
            //        .Substring(0, System.IO.Directory.GetCurrentDirectory().Length - 9) + url_HQ_cover;
            //}
            get {
                int seed = 1;
                foreach (char l in title) {
                    seed += (int)l;
                }
                Random rnd = new Random(seed);
                ColorHelper.HSL hsl = new ColorHelper.HSL(rnd.Next(360), (byte)rnd.Next(50, 90), (byte)rnd.Next(20, 60));
                string hex = $"#{ColorHelper.ColorConverter.HslToHex(hsl).Value}";
                return hex;
            }
        }

        public string date {
            get {
                return date_of_creation.Value.ToString("D");
            }
        }

        public string countOfTracks {
            get {
                return $"{Tracks.Count} треков, ";
            }
        }

        public int totalSeconds {
            get {
                int sec = 0;
                foreach (Tracks track in Tracks) {
                    sec += track.duration;
                }
                return sec;
            }
        }
        
        public string totalDuration {
            get {
                string duration = "";
                int hours = totalSeconds / 3600;
                if (hours != 0)
                    duration += $"{hours} час. ";
                int min = (totalSeconds - hours * 3600) / 60;
                    duration += $"{min} мин. ";
                int sec = totalSeconds % 60;
                if (sec != 0)
                    duration += $"{sec} сек.";
                return duration;
            }
        }

        public string type {
            get {
                if (Tracks.Count <= 4) {
                    return "Cингл";
                }
                else
                    return "Альбом";

            }
        }

        public int totalCountOfListenings {
            get {
                int count = 0;
                foreach (Tracks track in Tracks) {
                    count += track.count_of_listenings ?? 0;
                }
                return count;
            }
        }
        
        public List<Genres> listTracksGenres {
            get {
                List<Genres> genres = new List<Genres>();
                foreach (Tracks track in Tracks) {
                    if (!genres.Contains(track.Genres))
                        genres.Add(track.Genres);
                }
                return genres;
            }
        }

    }
}
